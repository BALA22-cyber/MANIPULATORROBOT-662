<?xml version="1.0"?>

<!-- <launch>
  <arg name="arg_x" default="0.00" />
  <arg name="arg_y" default="0.00" />
  <arg name="arg_z" default="0.00" />
  <arg name="arg_R" default="0.00" />
  <arg name="arg_P" default="0.00" />
  <arg name="arg_Y" default="0.00" />
  <param name="robot_description" textfile="$(find mobot)/urdf/mobot.urdf" />
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find mobot)/world/hos2.world"/>
  </include>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="False"/>
    </node>
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model mobot" />
  
  <rosparam command="load" file="$(find mobot)/config/joint_trajectory_controller.yaml" />
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner" ns="/mobot" args="joint_state_controller rear_rmotor rear_lmotor right_motor left_motor link_1_motor link_2_motor link_3_motor link_4_motor link_5_motor link_6_motor link_7_motor link_8_motor"/> 
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
</launch> --> 
<!-- Every launch file starts with this command -->
<launch> 

    <!-- Include helps you launch other launch files within this launch file-->
        <!-- For file tag, mention the gazebo_ros empty world's launch file -->
        <!-- For the arg name, give any name of your choice to this world -->
        <!-- for the value tag, provide the path to the world file that you downloaded -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find mobot)/world/hos2.world"/>
  </include>		

        <!-- Defining this param here helps you store all the urdf contents of robot+lidar into a single param name -->
        <!-- fill the command by adding in the path to your .xacro file the $ symbol below -->
        <!--  -->
	
    <!-- Add in your robot name in the value tag -->
    <param name= "robot_description" command="cat $(find mobot)/urdf/mobot.urdf" />
    <param name = "my_robot" value="mobot"/> 
	<arg name ="init_pose" value="-x 0 -y 0 -z 0 -R 0 -P 0 -Y 0"/>
    

    <!-- This command adds the controller variables you defined in the config file into ros's parameter list. Simply add the file name in the file tag -->
  <rosparam command="load" file="$(find mobot)/config/joint_trajectory_controller.yaml" />


	<!-- Node for publishing base footprint -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="false"/>
    </node>


    <!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /dummy_link 10" />


    <!-- Controller spawner: Starts all the defined controllers with their configs. Just add your controller names defined in your config file into the args tag below   -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    	output="screen" ns="/mobot" args="joint_state_controller rear_rmotor rear_lmotor right_motor left_motor link_1_motor link_2_motor link_3_motor link_4_motor link_5_motor link_6_motor link_7_motor link_8_motor"/>


    <!-- A node to publish the robot states onto ros network -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>	


    <!-- A node to spawn the robot into gazebo's world file. Notice that the args has the param robot_description that you previously defined. This is how your robot's spec gets included.-->
   	<node
		name="spawn_model"
		pkg="gazebo_ros"
		type="spawn_model"
		args="$(arg init_pose) -param robot_description -urdf -model mobot"
		output="screen"/>


	<!--Default node -->
	<node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />


</launch>
